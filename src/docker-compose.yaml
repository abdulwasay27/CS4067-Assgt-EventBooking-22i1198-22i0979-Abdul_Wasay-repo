services:
  frontend-service:
    build: ./services/frontend-service
    ports:
      - "9090:80"
    depends_on:
      - gateway-service

  gateway-service:
    build: ./services/api-gateway
    ports:
      - "8080:8080"
    env_file: ./services/api-gateway/.env
    depends_on:
      - user-service
      - booking-service
      - event-service

  user-service:
    build: ./services/user-service
    ports:
      - "3000:3000"
    env_file: ./services/user-service/.env
    depends_on:
      - database

  booking-service:
    build: ./services/booking-service
    ports:
      - "3001:3001"
    env_file: ./services/booking-service/.env
    depends_on:
      - database
      - event-service
      - rabbitmq

  event-service:
    build: ./services/event-service
    ports:
      - "3002:3002"
    env_file: ./services/event-service/src/config/.env
    depends_on:
      - database

  notification-service:
    build: ./services/notification-service
    ports:
      - "5004:5004"
    env_file: ./services/notification-service/src/config/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy

  database:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  rabbitmq:
    image: "rabbitmq:3.12-management-alpine"
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
